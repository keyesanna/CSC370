import java.io.File;
import java.lang.*;
import java.util.Scanner;

public class LexAn
{
    int charClass;
    char [] lexeme = new char[100];
    char nextChar;
    int lexLen;
    int token;
    int nextToken;
    
    private static final int LETTER = 0;
    private static final int DIGIT = 1;
    private static final int UNKNOWN = 99;
    private static final int INT_LIT = 10;
    private static final int IDENT = 11;
    private static final int ASSIGN_OP = 20;
    private static final int ADD_OP = 21;
    private static final int SUB_OP = 22;
    private static final int MULT_OP = 23;
    private static final int DIV_OP = 24;
    private static final int LEFT_PAREN = 25;
    private static final int RIGHT_PAREN = 26;
    private static final int EOF = 30;
    
    public void main (String [] Args)
    {
        File file = new File("demofile.txt");
        Scanner sc = new Scanner(file);
        
        while(sc.hasNextLine())
        {
            getChar();
        }
               
        do
        {
            lex();
        }while(nextToken != EOF);
    }
    
    int lookup(char ch)
    {
        switch(ch)
        {
            case '(':
                addChar();
                nextToken = LEFT_PAREN;
                break;
            case ')':
                addChar();
                nextToken = RIGHT_PAREN;
                break;
            case '+':
                addChar();
                nextToken = ADD_OP;
                break;
            case '-':
                addChar();
                nextToken = SUB_OP;
                break; 
            case '*':
                addChar();
                nextToken = MULT_OP;
                break; 
            case '/':
                addChar();
                nextToken = DIV_OP;
                break;
            default:
                addChar();
                nextToken = EOF;
                break;
        }
        return nextToken;
    }
    
    void addChar()
    {
        if(lexLen <= 98)
        {
            lexeme[lexLen++] = nextChar;
            lexeme[lexLen] = 0;
        }
        else
            System.out.println("Error = lexeme is too long");
    }
    
    void getChar()
    {
        if(nextChar != EOF)
        {
            if(nextChar == LETTER)
                charClass = LETTER;
            else if(nextChar == DIGIT)
                charClass = DIGIT;
            else
                charClass = UNKNOWN;
        }
        else
        {
            charClass = EOF;
        }
    }
    
    void getNonBlank()
    {
        while(nextChar == ' ')
            getChar();
    }
    
    int lex()
    {
        lexLen = 0;
        getNonBlank();
        
        switch(charClass)
        {
            case LETTER:
                addChar();
                getChar();
                while(charClass == LETTER || charClass == DIGIT)
                {
                    addChar();
                    getChar();
                }
                nextToken = IDENT;
                break;
            case DIGIT:
                addChar();
                getChar();
                while(charClass == DIGIT)
                {
                    addChar();
                    getChar();
                }
                nextToken = INT_LIT;
                break;
            case UNKNOWN:
                lookup(nextChar);
                getChar();
                break;
            case EOF:
                nextToken = EOF;
                lexeme[0] = 'E';
                lexeme[1] = 'O';
                lexeme[2] = 'F';
                lexeme[3] = 0;
                break;
        }
        System.out.println("Next token is " + nextToken + ", Next lexeme is " + lexeme);
        return nextToken;
    }
}    
